== Info:   Trying 127.0.0.1:8080...
== Info: Connected to localhost (127.0.0.1) port 8080 (#0)
=> Send header, 87 bytes (0x57)
0000: GET /limit_get HTTP/1.1
0019: Host: localhost:8080
002f: User-Agent: curl/7.81.0
0048: Accept: */*
0055: 
== Info: Mark bundle as not supporting multiuse
<= Recv header, 17 bytes (0x11)
0000: HTTP/1.1 200 OK
<= Recv header, 40 bytes (0x28)
0000: Content-Type: Content-Type: text/plain
<= Recv header, 22 bytes (0x16)
0000: Content-Length: 8737
<= Recv header, 19 bytes (0x13)
0000: Connection: close
<= Recv header, 2 bytes (0x2)
0000: 
<= Recv data, 8737 bytes (0x2221)
0000: #!/usr/bin/python..import cgi.import os.import sys.from urllib.p
0040: arse import unquote.import cgitb.from textwrap import dedent.imp
0080: ort traceback.from datetime import datetime.FILE = "cgi_log"..# 
00c0: Clear the cgi_log file.with open(FILE, 'w') as log_file:.    log
0100: _file.truncate(0)..def write_to(msg, filepath:str=FILE):.    wit
0140: h open(filepath, 'a') as f:.        current_time = datetime.now(
0180: ).strftime("%Y-%m-%d %H:%M:%S").        f.write(f"[{current_time
01c0: }] {msg}\n")..write_to("cgi called");.for k, v in os.environ.ite
0200: ms():.    write_to(f"ENV {k}={v}")..write_to("Received data: {}"
0240: )..CONTENT_TYPES = {.    ".html": "text/html",.    ".css": "text
0280: /css",.    ".js": "text/javascript",.    ".jpg": "image/jpeg",. 
02c0:    ".jpeg": "image/jpeg",.    ".png": "image/png",.    ".pdf": "
0300: application/pdf",.}..#sometimes upload fails, reason being that 
0340: the content recieved by cgi is empty. Reffer to "cgi_log"..def r
0380: esponse():.    debug_response = dedent(""".    HTTP/1.1 200 OK. 
03c0:    Content-Type: text/plain.    Content-Length: 13..    Hello, W
0400: orld!.    """)..    sys.stdout.write(debug_response).    sys.std
0440: out.flush()..cgitb.enable()..# Ensure CONTENT_TYPE is set in the
0480:  environment.write_to(f"CONTENT_TYPE: {os.environ.get('CONTENT_T
04c0: YPE')}")..# Initialize FieldStorage.raw_data = sys.stdin.buffer.
0500: read()  # Read as bytes.write_to(f"Raw data: {raw_data}").import
0540:  io..try:.    # Pass raw_data as a BytesIO stream to FieldStorag
0580: e.    form = cgi.FieldStorage(fp=io.BytesIO(raw_data), environ=o
05c0: s.environ, keep_blank_values=True).except Exception as e:.    er
0600: ror_message = traceback.format_exc().    write_to(f"Error: {erro
0640: r_message}").    sys.exit(1)..try:    .    received_data = {}.  
0680:   for key in form.keys():.        field_item = form[key]..      
06c0:   if field_item.filename:  # It's a file.            file_conten
0700: t = field_item.file.read()  # This is bytes.            received
0740: _data[key] = f"<{len(file_content)} bytes received>".        els
0780: e:  # It's a regular field.            received_data[key] = fiel
07c0: d_item.value..    write_to(f"Received data!: {received_data}").e
0800: xcept Exception as e:.    error_message = traceback.format_exc()
0840: .    write_to(f"Error logging received data: {error_message}")..
0880: .# Get request method and route.request_method = os.environ.get(
08c0: "REQUEST_METHOD", "").upper().route = unquote(os.environ.get("PA
0900: TH_TRANSLATED", ""))..style = '''.body {.    font-family: Arial,
0940:  sans-serif;.    background-color: #f4f4f4;.    margin: 0;.    p
0980: adding: 20px;.}.h1 {.    color: #4CAF50;.}.table {.    width: 10
09c0: 0%;.    border-collapse: collapse;.    border-radius: 10px;.    
0a00: overflow: hidden;.    padding: 10px;.}.th, td {.    text-align: 
0a40: left;.    background: #fff;.    padding: 10px 5px;.}.a {.    col
0a80: or: #1E90FF;.}..folder {.    color:rgb(0, 255, 251);.}..error {.
0ac0:     color: red;.    font-weight: bold;.}..success {.    color: g
0b00: reen;.    font-weight: bold;.}.'''..raw_success_page = (.    f"<
0b40: html>".    f"<head><style>{style}</style></head>".    f"<body>".
0b80:     f"<h2 class='success'>File Upload Successful</h2>".    f"<p>
0bc0: File <strong>%filename</strong> uploaded successfully to <strong
0c00: >%route</strong>.</p>".    f"%additional_info".    f"</body>".  
0c40:   f"</html>".)...def generate_error_page(title, message):.    ra
0c80: w_fail_page = dedent(f'''.    <html>.    <head>.        <style>.
0cc0:             {style}.            h2 {{.                color: red
0d00: ;.            }}.        </style>.    </head>.    <body>.       
0d40:  <h2>{title}</h2>.        <p>{message}</p>.    </body>.    </htm
0d80: l>.    ''').    return generate_response_string(.        content
0dc0: =raw_fail_page,.        status_code=404,.        status_message=
0e00: "Not Found",.        content_type="text/html".    )..def generat
0e40: e_response_string(.    content: str,.    status_code: int = 404,
0e80: .    status_message: str = "Not Found",.    content_length: int 
0ec0: = None,.    content_type: str = "text/html",.    **kwargs):.    
0f00: .    content = content.strip()  # Remove unintended whitespace o
0f40: r newlines.    additional_headers = "".join(f"{key}: {value}\r\n
0f80: " for key, value in kwargs.items()).    return (.    f"HTTP/1.1 
0fc0: {status_code} {status_message}\r\n".    f"Content-Type: {content
1000: _type}\r\n".    f"Content-Length: {len(content) if content_lengt
1040: h is None else content_length}\r\n".    f"{additional_headers}".
1080:     f"\r\n".    f"{content}".    )...def print_and_write_to(msg,
10c0:  file_path:str=FILE):.    print(msg).    with open(file_path, 'a
1100: ') as f:.        f.write(msg).    return file_path..def generate
1140: _env_representation():.    return dedent(""".    <div style="ove
1180: rflow-x:auto;">.        <table border='1' style="width: 100%; ta
11c0: ble-layout: fixed;">.            <tr><th style="width: 20%;">Key
1200: </th><th>Value</th></tr>.            {}.        </table>.    </d
1240: iv>.    """).format("".join(.        f"<tr><td style='word-wrap:
1280:  break-word; width: 20%;'>{key}</td><td style='word-wrap: break-
12c0: word;'>{value}</td></tr>".        for key, value in os.environ.i
1300: tems().    ))..additional_args = {.    "Pragma": "no-cache",.   
1340:  "Connection": "close",.    "Cache-Control": "no-store, no-cache
1380: , must-revalidate, max-age=0",.}..# Handle POST request.if reque
13c0: st_method == "POST":.    write_to("POST").    try:.        if "f
1400: ile" in form:.            file_item = form["file"].            i
1440: f file_item.file:.                file_path = os.path.join(sys.a
1480: rgv[1], file_item.filename).                if (os.path.exists(f
14c0: ile_path)):.                    write_to(f"Error writing file: p
1500: ath exists").                    error_response = generate_error
1540: _page("400 Bad Request", f"<b>\"{file_item.filename}\"</b> alrea
1580: dy exists in <b>\"{os.path.dirname(file_path)}\"</b>.").        
15c0:             sys.stdout.write(error_response).                   
1600:  sys.stdout.flush().                    sys.exit(1).            
1640:     try:.                    with open(file_path, 'wb') as f:.  
1680:                       f.write(file_item.file.read()).           
16c0:      except Exception as e:.                    error_message = 
1700: traceback.format_exc().                    write_to(f"Error writ
1740: ing file: {error_message}").                    error_response =
1780:  generate_error_page("500 Internal Server Error", f"An error occ
17c0: urred while saving the file. {error_message}").                 
1800:    sys.stdout.write(error_response).                    sys.stdo
1840: ut.flush().                    sys.exit(1).                file_
1880: size = os.path.getsize(file_path)..                response_body
18c0:  = raw_success_page.replace("%additional_info", dedent(f""".    
1900:             """)).replace("%filename", file_item.filename).repla
1940: ce("%route", file_path).strip()..                response = gene
1980: rate_response_string(.                    content        = respo
19c0: nse_body,.                    status_code    = 303,.            
1a00:         status_message = "See Other",.                    conten
1a40: t_type   = "text/html",.                    **additional_args.  
1a80:               ).                sys.stdout.write(response).     
1ac0:            sys.stdout.flush()..            else:.               
1b00:  error_response = generate_error_page("400 Bad Request", "No fil
1b40: e content.").                sys.stdout.write(error_response).  
1b80:               sys.stdout.flush().        else:.            error
1bc0: _response = generate_error_page("400 Bad Request", "No file was 
1c00: uploaded.").            sys.stdout.write(error_response).       
1c40:      sys.stdout.flush().    except Exception as e:.        error
1c80: _message = traceback.format_exc().        write_to(f"Error: {err
1cc0: or_message}").        error_response = generate_error_page("500 
1d00: Internal Server Error", f"An error occurred while processing the
1d40:  request. {error_message}").        sys.stdout.write(error_respo
1d80: nse).        sys.stdout.flush()..# Handle GET request.elif reque
1dc0: st_method == "GET":.    write_to("GET").    pdf_path = route..  
1e00:   extension = os.path.splitext(pdf_path)[1].    content_type = C
1e40: ONTENT_TYPES.get(extension, "Content-Type: text/plain")..    err
1e80: or_page = generate_error_page("404 Not Found", "The requested fi
1ec0: le was not found.")..    if not os.path.exists(pdf_path):.      
1f00:   not_found = generate_response_string(error_page).        sys.s
1f40: tdout.buffer.write(not_found.encode()).        sys.stdout.buffer
1f80: .flush().        sys.exit()..    with open(pdf_path, 'rb') as fi
1fc0: le:.        file_content = file.read()..    headers = (.        
2000: "HTTP/1.1 200 OK\r\n".        "Content-Type: {}\r\n".        "Co
2040: ntent-Length: {}\r\n".        "Connection: close\r\n".        "\
2080: r\n".    ).format(content_type, len(file_content)).encode()..   
20c0:  sys.stdout.buffer.write(headers).    sys.stdout.buffer.write(fi
2100: le_content).    sys.stdout.buffer.flush()....else:.    print("HT
2140: TP/1.1 405 Method Not Allowed").    print("Content-Type: text/ht
2180: ml").    print("\r").    print("Method not allowed.").    write_
21c0: to("UNSUPPORTED METHOD").# todo post method handled incorrectly,
2200:  doesnt consider set upload route
== Info: Closing connection 0
