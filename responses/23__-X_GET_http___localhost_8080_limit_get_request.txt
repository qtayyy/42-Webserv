== Info:   Trying 127.0.0.1:8080...
== Info: Connected to localhost (127.0.0.1) port 8080 (#0)
=> Send header, 87 bytes (0x57)
0000: GET /limit_get HTTP/1.1
0019: Host: localhost:8080
002f: User-Agent: curl/7.81.0
0048: Accept: */*
0055: 
== Info: Mark bundle as not supporting multiuse
<= Recv header, 17 bytes (0x11)
0000: HTTP/1.1 200 OK
<= Recv header, 40 bytes (0x28)
0000: Content-Type: Content-Type: text/plain
<= Recv header, 22 bytes (0x16)
0000: Content-Length: 6630
<= Recv header, 19 bytes (0x13)
0000: Connection: close
<= Recv header, 2 bytes (0x2)
0000: 
<= Recv data, 6630 bytes (0x19e6)
0000: #!/usr/bin/python..import cgi.import os.import sys.from urllib.p
0040: arse import unquote.import cgitb.from textwrap import dedent.imp
0080: ort traceback.from datetime import datetime..FILE = "cgi_log"..#
00c0:  Clear the cgi_log file.with open(FILE, 'w') as log_file:.    lo
0100: g_file.truncate(0)..def write_to(msg, filepath:str=FILE):.    wi
0140: th open(filepath, 'a') as f:.        current_time = datetime.now
0180: ().strftime("%Y-%m-%d %H:%M:%S").        f.write(f"[{current_tim
01c0: e}] {msg}\n")..write_to("cgi called");.for k, v in os.environ.it
0200: ems():.    write_to(f"ENV {k}={v}")..write_to("Received data: {}
0240: ")..CONTENT_TYPES = {.    ".html": "text/html",.    ".css": "tex
0280: t/css",.    ".js": "text/javascript",.    ".jpg": "image/jpeg",.
02c0:     ".jpeg": "image/jpeg",.    ".png": "image/png",.    ".pdf": 
0300: "application/pdf",.}..cgitb.enable()..try:.    form = cgi.FieldS
0340: torage().except Exception as e:.    error_message = traceback.fo
0380: rmat_exc().    write_to(f"Error: {error_message}").    sys.exit(
03c0: 1)..# Get request method and route.request_method = os.environ.g
0400: et("REQUEST_METHOD", "").upper().route = unquote(os.environ.get(
0440: "PATH_TRANSLATED", ""))..style = '''.body {.    font-family: Ari
0480: al, sans-serif;.    background-color: #f4f4f4;.    margin: 0;.  
04c0:   padding: 20px;.}.h1 {.    color: #4CAF50;.}.table {.    width:
0500:  100%;.    border-collapse: collapse;.    border-radius: 10px;. 
0540:    overflow: hidden;.    padding: 10px;.}.th, td {.    text-alig
0580: n: left;.    background: #fff;.    padding: 10px 5px;.}.a {.    
05c0: color: #1E90FF;.}..folder {.    color:rgb(0, 255, 251);.}..error
0600:  {.    color: red;.    font-weight: bold;.}..success {.    color
0640: : green;.    font-weight: bold;.}.'''...raw_success_page = (.   
0680:  f"<html>".    f"<head><style>{style}</style></head>".    f"<bod
06c0: y>".    f"<h2 class='success'>File Upload Successful</h2>".    f
0700: "<p>File <strong>%filename</strong> uploaded successfully to <st
0740: rong>%route</strong>.</p>".    f"</body>".    f"</html>".)...def
0780:  generate_error_page(.        title, .        message, .        
07c0: error_code=400,.        error_message="Bad Request"):.    raw_fa
0800: il_page = dedent(f'''.    <html>.    <head>.        <style>.    
0840:         {style}.            h2 {{.                color: red;.  
0880:           }}.        </style>.    </head>.    <body>.        <h2
08c0: >{title}</h2>.        <p>{message}</p>.    </body>.    </html>. 
0900:    ''').    return generate_response_string(.        content    
0940:     = raw_fail_page,.        status_code    = error_code,.      
0980:   status_message = error_message,.        content_type   = "text
09c0: /html".    )..def generate_response_string(.        content: str
0a00: ,.        status_code: int    = 404,.        status_message: str
0a40:  = "Not Found",.        content_length: int = None,.        cont
0a80: ent_type: str   = "text/html",.        **kwargs.    ):.    .    
0ac0: content = content.strip()  # Remove unintended whitespace or new
0b00: lines.    additional_headers = "".join(f"{key}: {value}\r\n" for
0b40:  key, value in kwargs.items()).    return (.        f"HTTP/1.1 {
0b80: status_code} {status_message}\r\n".        f"Content-Type: {cont
0bc0: ent_type}\r\n".        f"Content-Length: {len(content) if conten
0c00: t_length is None else content_length}\r\n".        f"{additional
0c40: _headers}".        f"\r\n".        f"{content}".    )...def prin
0c80: t_and_write_to(msg, file_path:str=FILE):.    print(msg).    with
0cc0:  open(file_path, 'a') as f:.        f.write(msg).    return file
0d00: _path...def generate_env_representation():.    return dedent("""
0d40: .    <div style="overflow-x:auto;">.        <table border='1' st
0d80: yle="width: 100%; table-layout: fixed;">.            <tr><th sty
0dc0: le="width: 20%;">Key</th><th>Value</th></tr>.            {}.    
0e00:     </table>.    </div>.    """).format("".join(.        f"<tr><
0e40: td style='word-wrap: break-word; width: 20%;'>{key}</td><td styl
0e80: e='word-wrap: break-word;'>{value}</td></tr>".        for key, v
0ec0: alue in os.environ.items().    ))...additional_args = {.    "Pra
0f00: gma": "no-cache",.    "Connection": "close",.    "Cache-Control"
0f40: : "no-store, no-cache, must-revalidate, max-age=0",.}...def bold
0f80: (text):.    return f"<b>{text}</b>"...def exit_error(generic_msg
0fc0: , error_message, error_code=400):.    error_response = generate_
1000: error_page(f"{error_code} {generic_msg}", error_message, error_c
1040: ode, error_message).    sys.stdout.write(error_response).    sys
1080: .stdout.flush().    sys.exit(1)...if request_method == "POST":. 
10c0:    write_to("POST").    if os.environ.get("CONTENT_LENGTH", "") 
1100: == "0":.        exit_error("Bad Request", "No data received.", 4
1140: 00)..    try:.        if not "file" in form:.            exit_er
1180: ror("Bad Request", "No file was uploaded.", 400).        .      
11c0:   file_item = form["file"].        if file_item.file is None: . 
1200:            exit_error("Bad Request", "No file content.", 400).  
1240:       .        file_path = os.path.join(sys.argv[1], file_item.f
1280: ilename).        if os.path.exists(file_path): .            exit
12c0: _error('Bad Request', f'"{bold(file_item.filename)}" already exi
1300: sts in "{bold(os.path.dirname(file_path))}"', 400).        .    
1340:     try:.            with open(file_path, 'wb') as f:.          
1380:       f.write(file_item.file.read()).        except Exception as
13c0:  e:.            error_message = traceback.format_exc().         
1400:    exit_error("Internal Server Error", error_message, 500).     
1440:    .        response_body = raw_success_page.\.            repla
1480: ce("%filename", file_item.filename).\.            replace("%rout
14c0: e", file_path).\.            strip()..        response = generat
1500: e_response_string(.            content        = response_body,. 
1540:            status_code    = 303,.            status_message = "S
1580: ee Other",.            content_type   = "text/html",.           
15c0:  **additional_args.        ).        sys.stdout.write(response).
1600:         sys.stdout.flush().    .    except Exception as e:.     
1640:    error_message = traceback.format_exc().        exit_error("In
1680: ternal Server Error", error_message, 500)...elif request_method 
16c0: == "GET":.    write_to("GET")..    extension = os.path.splitext(
1700: route)[1].    content_type = CONTENT_TYPES.get(extension, "Conte
1740: nt-Type: text/plain")..    if not os.path.exists(route):.       
1780:  exit_error("The requested file was not found.", "404 Not Found"
17c0: , 404)..    with open(route, 'rb') as file:.        file_content
1800:  = file.read()..    headers = (.        "HTTP/1.1 200 OK\r\n".  
1840:       "Content-Type: {}\r\n".        "Content-Length: {}\r\n".  
1880:       "Connection: close\r\n".        "\r\n".    ).format(conten
18c0: t_type, len(file_content)).encode()..    sys.stdout.buffer.write
1900: (headers).    sys.stdout.buffer.write(file_content).    sys.stdo
1940: ut.buffer.flush()..else:.    exit_error("Method not allowed.", "
1980: 405 Method Not Allowed", 405).# todo post method handled incorre
19c0: ctly, doesnt consider set upload route
== Info: Closing connection 0
